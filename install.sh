#!/usr/bin/env bash
set -euo pipefail

# codex-up â€” build/install Codex CLI from source and set defaults
# Usage:
#   codex-up              # build from main (tip-of-main)
#   codex-up main         # same as above
#   codex-up 0.47.0       # build a specific release (auto-normalizes to rust-v0.47.0)
#   codex-up rust-v0.47.0 # explicit tag
# First run copies this helper to $BIN_DIR (default ~/.local/bin) so codex-up is available anywhere.
#
# Env:
#   REPO_DIR    (default: $HOME/src/openai-codex)
#   BIN_DIR     (default: $HOME/.local/bin)
#   CONFIG_DIR  (default: $HOME/.codex)
#   SKIP_CONFIG (set to 1 to skip writing ~/.codex/config.toml)

TARGET="${1:-main}"

REPO_URL="https://github.com/openai/codex"
REPO_DIR="${REPO_DIR:-$HOME/src/openai-codex}"
BUILD_DIR="$REPO_DIR/codex-rs"
BIN_DIR="${BIN_DIR:-$HOME/.local/bin}"
CONFIG_DIR="${CONFIG_DIR:-$HOME/.codex}"
CONFIG_FILE="$CONFIG_DIR/config.toml"
SCRIPT_NAME="codex-up"
SCRIPT_TARGET="$BIN_DIR/$SCRIPT_NAME"
SCRIPT_SOURCE="${BASH_SOURCE[0]:-$0}"
if [ "${SCRIPT_SOURCE#/}" = "$SCRIPT_SOURCE" ]; then
  SCRIPT_SOURCE="$(cd "$(dirname "$SCRIPT_SOURCE")" && pwd)/$(basename "$SCRIPT_SOURCE")"
fi

have() { command -v "$1" >/dev/null 2>&1; }

pm_install() {
  if   have brew;    then brew install "$@"
  elif have apt-get; then sudo apt-get update && sudo apt-get install -y "$@"
  elif have dnf;     then sudo dnf install -y "$@"
  elif have pacman;  then sudo pacman -S --noconfirm "$@"
  else
    echo ">> No supported package manager found; please install: $*"
  fi
}

echo ">> Checking prerequisites (git, curl, ripgrep, Rust)..."
have git  || pm_install git
have curl || pm_install curl
have rg   || pm_install ripgrep

if ! have cargo; then
  echo ">> Installing Rust toolchain (rustup)..."
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  # shellcheck disable=SC1091
  . "$HOME/.cargo/env"
fi

mkdir -p "$BIN_DIR" "$(dirname "$REPO_DIR")"

if [ -f "$SCRIPT_SOURCE" ] && [ "$SCRIPT_SOURCE" != "$SCRIPT_TARGET" ]; then
  if install -m 0755 "$SCRIPT_SOURCE" "$SCRIPT_TARGET"; then
    echo ">> Installed codex-up helper to $SCRIPT_TARGET"
  else
    echo ">> Warning: unable to install codex-up helper to $SCRIPT_TARGET (continuing)" >&2
  fi
fi

if [ ! -d "$REPO_DIR/.git" ]; then
  echo ">> Cloning $REPO_URL to $REPO_DIR"
  git clone "$REPO_URL" "$REPO_DIR"
else
  echo ">> Using existing repo at $REPO_DIR"
fi

echo ">> Fetching updates..."
git -C "$REPO_DIR" fetch --tags --prune

if [ "$TARGET" = "main" ]; then
  git -C "$REPO_DIR" checkout -q main
  git -C "$REPO_DIR" pull --ff-only
else
  # Normalize "0.47.0" -> "rust-v0.47.0"
  if [[ "$TARGET" =~ ^[0-9]+(\.[0-9]+)*(-.*)?$ ]]; then
    TARGET="rust-v$TARGET"
  fi
  echo ">> Checking out $TARGET"
  git -C "$REPO_DIR" checkout -q "$TARGET"
fi

echo ">> Building Codex (release mode)..."
cd "$BUILD_DIR"
cargo build --release

echo ">> Installing binary to $BIN_DIR/codex"
install -m 0755 "target/release/codex" "$BIN_DIR/codex"

# PATH hint
if ! echo ":$PATH:" | grep -q ":$BIN_DIR:"; then
  echo ">> Heads up: add $BIN_DIR to your PATH, e.g.:"
  echo "   echo 'export PATH=\"$BIN_DIR:\\$PATH\"' >> ~/.bashrc && . ~/.bashrc"
fi

# Write config defaults unless skipped
if [ -z "${SKIP_CONFIG:-}" ]; then
  mkdir -p "$CONFIG_DIR"
  if [ -f "$CONFIG_FILE" ]; then
    ts="$(date +%Y%m%d%H%M%S)"
    cp -f "$CONFIG_FILE" "$CONFIG_FILE.bak.$ts"
    echo ">> Backed up existing config to $(basename "$CONFIG_FILE").bak.$ts"
  fi
  cat > "$CONFIG_FILE" <<'TOML'
# ~/.codex/config.toml (generated by codex-up)
# Defaults:
# - model: gpt-5-codex
# - high reasoning effort
# - no approval prompts
# - unsandboxed full access (danger-full-access)
# - hide the full access warning

model = "gpt-5-codex"
model_reasoning_effort = "high"
approval_policy = "never"
sandbox_mode = "danger-full-access"

[notice]
hide_full_access_warning = true
TOML
  echo ">> Wrote defaults to $CONFIG_FILE"
else
  echo ">> SKIP_CONFIG=1 set; leaving ~/.codex/config.toml untouched."
fi

echo ">> Done. codex at: $(command -v codex || echo "$BIN_DIR/codex")"
codex --version || true
